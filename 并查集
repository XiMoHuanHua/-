// 并查集
/*
功能：
1、 将两个集合合并
2、 查询二元素是否在一个集合中 

原理：
 用“树”的形式来维护集合 
 每个集合的根节点的编号即为集合所有元素的编号 
 每一个节点都存储其 父节点 p[x] 表示 x的父节点 
 当查询一节点所属时，由其父节点向上查询 直至根节点

常见问题：
 1、 如何判断一节点是否为根节点 p[x] == x 
 2、 如何求x的集合编号：while（p[x] != x) x=p[x] 
 3、 如何合并二集合： 将一颗树插到另一棵树的某一位设置 	p[x] = y  

优化一： 核心思路： 路径压缩 （化多层结构为单层结构)
 1、经历一次后便将其父节点变为根节点  
 


优化二： 按秩合并（？？） 
*/ 


#include<bits/stdc++.h>
using namespace std;
const int N = 100010;

int n,m;
int p[N];

int find(int x){ // 返回 x 的根节点 + 路径压缩 
	if(p[x] != x) p[x] = find(p[x]);
	return p[x];  
}

int main (){
	scanf("%d %d",&n,&m);
	for(int i=0;i<n;i++) p[i]=i;  //初始化 令其父节点为自己 
	
	while(m--){
		char s[2];
		int a,b;
		scanf("%s %d %d",s,&a,&b);
		
		if(s[0]=='M') p[find(b)]=find(a);  
		//合并集合 让 a 的根节点为 b 的根节点的父（根）节点 
		else{
			if(find(b)==find(a)) puts("Yes");
			else puts("No"); 
		}
	}
} 
